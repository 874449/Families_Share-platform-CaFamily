const express = require('express');
const router = new express.Router();
const objectid = require('objectid');
const multer = require('multer');
const jwt = require('jsonwebtoken');
const fr = require('find-remove');
const nodemailer = require('nodemailer');
const hf = require('../helper-functions/forgot-password-email');
const path = require('path')

const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.SERVER_MAIL,
        pass: process.env.SERVER_MAIL_PASSWORD,
    }
});

const profileStorage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, path.join(__dirname, '../../images/profiles'))
    },
    filename: function (req, file, cb) {
        fr(path.join(__dirname, '../../images/profiles'),{prefix: req.params.id})
        cb(null, req.params.id + '-' + Date.now() + '.' + file.mimetype.slice(file.mimetype.indexOf("/") + 1, file.mimetype.length))
    }
});
const profileUpload = multer({ storage: profileStorage });

const childProfileStorage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, path.join(__dirname, '../../images/profiles'))
    },
    filename: function (req, file, cb) {
        fr(path.join(__dirname, '../../images/profiles'),{prefix: req.params.childId})
        cb(null, req.params.childId + '-' + Date.now() + '.' + file.mimetype.slice(file.mimetype.indexOf("/") + 1, file.mimetype.length))
    }
});
const childProfileUpload = multer({ storage: childProfileStorage });

const Profile = require('../models/profile');
const Address = require('../models/adress');
const City = require('../models/city');
const Image = require('../models/image');
const Member = require('../models/member');
const User = require('../models/user');
const Notification = require('../models/notification');
const Parent = require('../models/parent');
const Child = require('../models/child');
const Framily = require('../models/framily');
const Password_Reset = require('../models/password-reset');

router.get('/', (req,res) => {
    User.find( {}, ( error, users) => {
        if (error) {
            res.status(400).send("Something went wrong");
        }
        if (users) {
            return res.json(users);
        } else {
            res.status(404).send("There are no users")
        }
    })
});

router.post('/', (req,res) => {
    const { name, number, email, password, visible} = req.body;
    User.findOne( { email: email }, async ( error, user) => {
        if (error) {
            res.status(400).send("Something went wrong");
        }
        if (user) {
            res.status(400).send("User already exists")
        } else {
            const user_id = objectid();
            const address_id = objectid();
            const image_id = objectid();
            const token = jwt.sign({ user_id: user_id }, process.env.SERVER_SECRET);
            const user = {
                user_id: user_id,
                provider: "families_share",
								email: email,
								token: token,
                password: password,
                last_login: new Date(),
            };
            const profile = {
                given_name: name.substr(0, name.indexOf(" ")-1),
                family_name: name.substr(name.indexOf(" ")+1,name.length),
                user_id: user_id,
                email: email,
                phone: number,
                phone_type: "mobile",
                visible: visible,
                image_id: image_id,
                address_id: address_id,
            };
            const image = {
                image_id: image_id,
                owner_type: "user",
                owner_id: user_id,
                path: "/images/profiles/user_default_photo.png",
            };
            const address = {
                address_id: address_id,
                street: "",
                number: 0,
                city_id: ""
            };
            try {
                await User.create(user);
                await Profile.create(profile);
                await Image.create(image);
                await Address.create(address);
                res.json({id: user_id, token});
            } catch (err) {
                res.status(400).send("Something went wrong");
            }

            
        }
    })
});

router.post('/authenticate/email', (req, res) => {
    const email = req.body.email;
    const password = req.body.password;
    User.findOne({ email: email, password: password}, (error, user) => {
        if(error) res.status(400).send("Something went wrong");
        if(user){
            const token = jwt.sign({ user_id: user.user_id, email: email }, process.env.SERVER_SECRET);
            const response = {
                id: user.user_id,
                token: token,
						};
						user.last_login = new Date ();
						user.save();
            res.json(response);
        } else {
            res.status(401).send("Authentication failure");
        }
    });
});

router.post('/authenticate/google', (req, res) => {
	//verify google token
	const googleProfile = req.body.profile;
	const googleToken = req.body.token;
	User.findOne({email: googleProfile.email}, async (error, user)=>{
		if(error) res.status(400).send("Something went wrong");
		if(user) {
			const token = jwt.sign({ user_id: user.user_id, email: googleProfile.email }, process.env.SERVER_SECRET);
			const response = {
					id: user.user_id,
					email: googleProfile.email,
					token: token,
					google_token: googleToken
			};
			user.last_login = new Date () ; 
			user.save();
			res.json(response);
		} else {
				const user_id = objectid();
				const address_id = objectid();
				const image_id = objectid();
				const token = jwt.sign({ user_id: user_id, email: googleProfile.email }, process.env.SERVER_SECRET);
				const user = {
					user_id: user_id,
					provider: "google",
					email: googleProfile.email,
					token: token,
					auth0_token: googleToken.id_token,
					last_login: new Date(),
				};
				const profile = {
					given_name: googleProfile.givenName,
					family_name: googleProfile.familyName,
					user_id: user_id,
					email: googleProfile.email,
					phone: "",
					phone_type: "mobile",
					visible: true,
					image_id: image_id,
					address_id: address_id,
				};
				const image = {
					image_id: image_id,
					owner_type: "user",
					owner_id: user_id,
					path: googleProfile.imageUrl,
				};
				const address = {
					address_id: address_id,
					street: "",
					number: 0,
					city_id: ""
				};
				try {
					await User.create(user);
					await Profile.create(profile);
					await Image.create(image);
					await Address.create(address);
					res.json({ id: user_id, token, google_token: googleToken.id_token });
				} catch (err) {
					res.status(500).send("Something went wrong")
				}
			}
	})
});

router.post('/forgotpassword', (req, res) => {
    const email = req.body.email;
    User.findOne({ email: email }, (error, user) => {
        if(error) res.status(400).send("Something went wrong");
        if(user){
            const token = jwt.sign({ user_id: user.user_id }, process.env.SERVER_SECRET, { expiresIn: 60*60*24 });
            const mailOptions = {
                from: process.env.SERVER_MAIL,
                to: email,
                subject: 'Forgot Password',
                html: hf.newForgotPasswordEmail(`families-share://changepsw/${token}`)
            };
            transporter.sendMail(mailOptions, function (err, info) {
                if (err) {
                    res.status(400).send("Something went wrong");
                } else {
                    Password_Reset.findOne({ user_id: user.user_id, email: user.email}, (er, reset)=>{
                        if (er) res.status(400).send("Something went wrong");
                        if(reset){
                            reset.token = token;
                            reset.save();
                        } else {
                            Password_Reset.create({
                                user_id: user.user_id,
em                                email: user.email,
                                token: token,
                            })
                        }
                    })
                    res.status(200).send("Forgot password email was sent");
                }
            }); 
        } else {
            res.status(404).send("User doesn't exist");
        }
    });
});

router.get('/changepassword', (req, res) => {
    if (!req.user_id) return res.status(401).send('Invalid token');
    const user_id = req.user_id
    Password_Reset.findOne({ user_id: user_id }, (error, reset) => {
        if (error) res.status(400).send("Something went wrong")
        if (reset) {
            Profile.findOne({ user_id: user_id })
                .populate('image')
                .lean().exec((err, profile) => {
                    if (err) res.status(400).send("Something went wrong");
                    if (profile) {
                        res.json(profile);
                    }
                });
        } else {
            res.status(400).send("Bad Request")
        }
    })
});

router.post('/changepassword', (req, res) =>{
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const id = req.user_id;
    const userPatch = {
        password: req.body.password
    };
    Password_Reset.deleteOne({ user_id: id }, (error) => {
        if (error) {
            res.status(404).send("Reset not found");
        } else {
            User.updateOne({ user_id: id }, userPatch, (err) => {
                if (err) res.status(400).send("Something went wrong")
                res.status(200).send("Password Changed")
            });
        }
    });

});

router.get('/:id', (req, res) =>{
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const id = req.params.id;
    User.findOne( { user_id : id }, (error, user) => {
        if(error) res.status(400).send("Something went wrong");
        if(user){
            res.json(user);
        } else {
            res.status(400).send("Something went wrong");
        }
    });
});

router.get('/:id/groups', (req,res) => {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const id = req.params.id
    Member.find( { user_id: id, accepted: true }, ( error, groups ) => {
        if (error) {
            console.error(error);
        }
        if (groups.length>0) {
            return res.json(groups);
        } else {
            res.status(404).send("User hasn't joined any groups")
        }
    })
});

router.post("/:id/groups", (req, res) =>{
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const id = req.params.id;
    const member = req.body;
    Member.create( member, ( error, member ) => {
        if(error) res.status(400).send("Something went wrong");
        res.status(200).send("joined succesfully");
    })
});

router.get('/:id/profile', (req, res)=>{
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const id = req.params.id;
    Profile.findOne({ user_id: id })
    .populate('image', 'path')
    .populate({ path: 'address' , populate: { path: "city"}})
    .lean().exec( (error, profile) =>{
        if (error){
            res.status(400).send("Something went wrong");
        }
        if(profile){
            res.json(profile);
        } else {
            res.status(404).send("Profile not found")
        }
    });
});

router.patch('/:id/profile', profileUpload.single('photo'), async (req, res)=> {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const user_id = req.params.id;
    const name = req.body.name.trim();
    const family_name = name.substr(name.lastIndexOf(" ")+1,name.length);
    const file = req.file;
    const given_name = name.substr(0,name.lastIndexOf(" "));
    const profilePatch = {
        given_name: given_name,
        family_name: family_name,
        email: req.body.email,
        phone: req.body.phone,
        phone_type: req.body.phone_type,
        visible: req.body.visible,
    };
    const addressPatch = {
        street: req.body.street,
        number: req.body.number,
    }
    try {
        await City.findOne({ name: req.body.cityName }, (error, city) => {
					addressPatch.city_id = city.city_id;
					Address.updateOne({ address_id: req.body.address_id }, addressPatch, (err, res) => {
							if (err) res.status(400).send("Something went wrong")
					});
        });
        await Profile.updateOne({ user_id: user_id }, profilePatch);

        if (file) {
            const imagePatch = {
                path: "/images/profiles/" + file.filename
            };
            await Image.updateOne({ owner_type: "user", owner_id: user_id }, imagePatch);
        }
        res.status(200).send("Profile Updated");
    } catch (err) {
        res.status(400).send(err);
    }
});

router.get('/:id/notifications', (req,res) => {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const id = req.params.id
    Notification.find( { owner_id: id, owner_type: "user" }, ( error, notifications ) => {
        if (error) {
            res.status(400).send("Something went wrong");
        }
        if (notifications.length>0) {
            return res.json(notifications);
        } else {
            res.status(404).send("User has no notifications")
        }
    })
});

router.get('/:id/children', (req, res) => {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const id = req.params.id
    Parent.find( { parent_id: id }, ( error, children ) => {
        if (error) {
            res.status(400).send("Something went wrong")
        }
        if (children.length>0) {
            return res.json(children);
        } else {
            res.status(404).send("User has no children");
        }
    })
});

router.get('/:id/framily', (req, res) => {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const id = req.params.id
    Framily.find( {user_id: id} , (error, framily) => {
        if (error) {
            res.status(400).send("Something went wrong")
        }
        if (framily.length>0) {
            return res.json(framily);
        } else {
            res.status(404).send("User has no framily members");
        }
    })
});

router.post('/:id/framily', (req, res) => {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const user_id = req.params.id;
    const inviteIds = req.body.inviteIds;
    const framilyMembers = [];
    Framily.find({ user_id: user_id }, (error, members) => {
        if (error) res.status(400).send("Something went wrong");
        inviteIds.forEach(inviteId => {
            if (members.filter(member => member.framily_id === inviteId).length === 0) {
                framilyMembers.push({
                    framily_id: inviteId,
                    user_id: user_id
                })
                framilyMembers.push({
                    framily_id: user_id,
                    user_id: inviteId,
                })
                
            }
        })
        Framily.create(framilyMembers)
        res.status(200).send("Framily members added")
    })
});

router.post('/:id/children', async (req, res) =>{
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const parent_id = req.params.id;
    const child = req.body;
    const image_id = objectid();
    const child_id = objectid();
    const image = {
        image_id: image_id,
        owner_type: "child",
        owner_id: child_id,
        path: "/images/profiles/child_default_photo.jpg",
    };
    child.child_id = child_id;
    child.background = "#00838F";
    child.image_id = image_id;
    const parent = {
        parent_id: parent_id,
        child_id: child_id,
    }
    try {
        await Image.create(image);
        await Child.create(child);
        await Parent.create(parent);
        res.status(200).send("Child created");
    } catch (error) {
        console.log(error);
        res.status(400).send("Something went wrong");
    }
});

router.delete('/:userId/groups/:groupId', (req, res) => {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const user_id = req.params.userId;
    const group_id = req.params.groupId;
    Member.deleteOne({ user_id: user_id, group_id: group_id }, error => {
        if (error) res.status(400).send("Something went wrong");
        res.status(200).send("deleted succesfully");
    });
});

router.get("/:userId/children/:childId", (req, res) => {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    Child.findOne({ child_id: req.params.childId})
    .populate('image')
    .lean().exec( (error, child) =>{
        if(error) res.status(400).send("Something went wrong");
        if(child){
            res.json(child);
        } else {
            res.status(400).send("No child found");
        }
    });
});

router.patch("/:userId/children/:childId", childProfileUpload.single('photo'), async (req, res) =>{
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const file = req.file;
    const child_id = req.params.childId;
    const childPatch = {
        ...req.body
		};
    try {
        await Child.updateOne({ child_id: child_id }, childPatch)
        if (file) {
            const imagePatch = {
                path: "/images/profiles/" + file.filename
            };
            await Image.updateOne({ owner_type: "child", owner_id: child_id }, imagePatch);
        }
        res.status(200).send("Child profile Updated");
    } catch (error) {
        res.status(400).send("Something went wrong")
    }
});

router.delete("/:userId/children/:childId", async (req, res) => {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const child_id = req.params.childId;
    try{
        await Child.deleteOne({ child_id: child_id});
        await Parent.deleteMany({ child_id: child_id });
        await Image.deleteOne({owner_type: "child", owner_id: child_id });
        res.status(200).send("Child deleted");
    } catch (error) {
        res.status(400).send("Something went wrong")
    }
});

router.get("/:userId/children/:childId/parents", (req, res) => {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    Parent.find({ child_id: req.params.childId }, (error, parents) =>{
        if(error) res.status(400).send("Something went wrong");
        if(parents){
            const parentIds = [];
            parents.forEach( parent => parentIds.push(parent.parent_id));
            Profile.find({ user_id: { $in: parentIds }}, (err, parentProfiles) =>{
                if(err) res.status(400).send("Something went wrong");
                if(parentProfiles){
                    res.json(parentProfiles)
                }
            });
        } else {
            res.status(400).send("Something went wrong");
        }
    });
});

router.post("/:userId/children/:childId/parents", (req, res) => {
    if (!req.user_id) return res.status(401).send('Not authenticated')
    const parentId = req.body.parentId
    Parent.find({ child_id: req.params.childId }, (error, parents) =>{
        if(error) res.status(400).send("Something went wrong");
        Parent.create({
            parent_id: parentId,
            child_id:   req.params.childId,
        })
    });
});

module.exports = router;
